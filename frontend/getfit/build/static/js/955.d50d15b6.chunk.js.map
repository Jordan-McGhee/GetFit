{"version":3,"file":"static/js/955.d50d15b6.chunk.js","mappings":"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","sources":["Pages/Workout/Components/ExerciseInput.js","Pages/Workout/Pages/NewWorkout.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from \"react\";\n\nimport Input from \"../../../Components/FormElements/Input\";\n\nconst ExerciseInput = props => {\n    return (\n\n        <div className=\"\">\n\n            <Input\n                id = {`exercise${props.inputNumber}-name`}\n                label = \"Exercise Name\"\n                type = \"text\"\n                placeholder = \"Enter a name.\"\n                errorText = \"Please enter a name!\"\n                value = { props.exerciseName || null }\n            />\n            <div className=\"flex justify-between max-w-2xl mb-4\">\n                \n                <Input\n                    id = {`exercise${props.inputNumber}-sets`}\n                    label = \"Sets\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter a set count!\"\n                    value = { props.exerciseSets || null }\n                />\n\n                <Input\n                    id = {`exercise${props.inputNumber}-reps`}\n                    label = \"Reps\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter a rep count!\"\n                    value = { props.exerciseReps || null }\n                />\n\n                <Input\n                    id = {`exercise${props.inputNumber}-weight`}\n                    label = \"Weight\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter the weight you used!\"\n                    value = { props.exerciseWeightUsed || null }\n                />\n            \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default ExerciseInput","import React, { useState, useContext } from \"react\";\n\nimport { useFetch } from \"../../../Hooks/useFetch\"\nimport { useNavigate } from \"react-router-dom\";\n\nimport Button from \"../../../Components/FormElements/Button\";\nimport Input from \"../../../Components/FormElements/Input\";\nimport Card from \"../../../Components/UIElements/Card\";\nimport ExerciseInput from \"../Components/ExerciseInput\";\nimport ErrorModal from \"../../../Components/UIElements/ErrorModal\";\n\nimport { AuthContext } from \"../../../Context/auth-context\";\n\nconst NewWorkout = () => {\n\n    // AUTH\n    const auth = useContext(AuthContext)\n\n    // EXERCISE INPUT CODE\n    // starting list of inputs for newWorkout form\n    let exerciseInputs = [\n        <ExerciseInput inputNumber = { 1 } key = { 1 } />,\n        <ExerciseInput inputNumber = { 2 } key = { 2 } />,\n        <ExerciseInput inputNumber = { 3 } key = { 3 } />\n    ]\n\n    // states to update the array of exerciseInputs and input counter to pass via props to individual imports\n    const [ exerciseInputsList, setExerciseInputsList ] = useState(exerciseInputs)\n    const [ inputCount, setInputCount ] = useState(1)\n\n    // newInput to push to inputs array\n    let newInput =\n        <ExerciseInput\n            inputNumber = { exerciseInputs.length + inputCount }\n            key = { exerciseInputs.length + inputCount }\n        />\n\n    // addInput handler function\n    const addExerciseInput = () => {\n        setExerciseInputsList([ ...exerciseInputsList, newInput ])\n        setInputCount(inputCount + 1)\n    }\n\n    // NAVIGATION CODE\n    // state will grab the newly created workout's ID and we can use navigate to redirect to the view page upon creation\n    let navigate = useNavigate()\n\n    // this is for the discard button. Goes back to the last page -- need to add modal popup for confirm maybe?\n    const discardHandler = () => {\n        navigate(-1)\n    }\n\n    // FETCH CODE\n    const { hasError, sendRequest, clearError } = useFetch()\n\n    // errors in the form, will add to this array and prevent form submission if there are any\n    const [ formHasErrors, setFormHasErrors ] = useState(false)\n\n    const submitHandler = async (event) => {\n        event.preventDefault()\n\n        let errors = []\n\n        let target = event.target\n\n        // variables to add exercises to the body of the form data so it will save correctly to the backend\n        let exercise = {\n            exerciseName: \"\",\n            sets: 0,\n            reps: 0,\n            weightUsed: []\n        }\n\n        // this is what the backend is expecting, so I will store everything here\n        let formData = {\n            workoutTitle: \"\",\n            exercises: []\n        }\n\n        // GRABBING INPUTS FROM THE FORM SINCE THE LENGTH IS VARIABLE\n        // grab first input value for workout title\n        // loop over exercise inputs and add them to exercise object\n        // push newly created exercise object into formData.exercises array and reset as I iterate\n        \n        target[0].value ? formData.workoutTitle = target[0].value : errors.push('Please enter a title for your workout!')\n\n        // variable to track which exercise we are inputting\n        let count = 1\n\n        for (let i = 1; i < target.length-3; i++ ) {\n            // first input for exercise\n            if (i%4 === 1) {\n                target[i].value ? exercise.exerciseName = target[i].value : errors.push(`Please enter a name for exercise ${count}!`)\n\n                // console.log(`Exercise Title: ${target[i].value} | ${exercise.exerciseName}`)\n\n            // second input\n            } else if (i%4 === 2) {\n                target[i].value ? exercise.sets = target[i].value : errors.push(`Please enter the set count for exercise ${count}!`)\n\n                // console.log(`Exercise Sets: ${target[i].value}`)\n            // third input\n            } else if (i%4 === 3) {\n                target[i].value ? exercise.reps = target[i].value : errors.push(`Please enter the rep count for exercise ${count}!`)\n\n                // console.log(`Exercise Reps: ${target[i].value}`)\n\n            // last input, push to exercise array and reset exercise object\n            } else {\n                target[i].value ? exercise.weightUsed.push(target[i].value) : errors.push(`Please enter the weight you used for exercise ${count}!`)\n\n                // console.log(`Exercise Weight Used: ${exercise.weightUsed}`)\n                // console.log(`Full Exercise:\n                //     ${exercise.exerciseName}\n                //     ${exercise.sets}\n                //     ${exercise.reps}\n                //     ${exercise.weightUsed}\n                // `)\n\n                // Add newly created exercise to array in formData object\n                formData.exercises.push(exercise)\n                count++\n\n                // reset exercise variable. Only really necessary for the weightUsed array\n                exercise = {\n                    exerciseName: \"\",\n                    sets: 0,\n                    reps: 0,\n                    weightUsed: []\n                }\n            }\n        }\n\n        // if there are any errors, prevent form submission\n        if (errors.length > 0) {\n            // console.log(errors)\n            setFormHasErrors(true)\n            // console.log(formHasErrors)\n            return\n        }\n\n        let responseData\n\n        // send the request to the backend to save\n        try {\n            responseData = await sendRequest(\n                // URL\n                `${process.env.REACT_APP_BACKEND_URL}/workout`,\n                // METHOD\n                \"POST\",\n                // HEADERS\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + auth.token\n                },\n                // BODY\n                JSON.stringify({\n                    workoutTitle: formData.workoutTitle,\n                    exercises: formData.exercises\n                })\n            )\n\n        } catch(err) {\n\n        }\n\n        // reset form inputs after\n        setExerciseInputsList(exerciseInputs)\n        setInputCount(1)\n\n        // grab the newly created workout's id and navigate to the correct page for it\n        const nextPageID = responseData.workout.id\n\n        const navigateHandler = () => navigate(`/workout/${nextPageID}/view`)\n\n        // NAVIGATE TO CREATED WORKOUT'S PAGE AFTER SHORT TIMEOUT TO MAKE SURE THE RESPONSE GOES THROUGH\n        setTimeout(navigateHandler, 500)\n    }\n\n    const clearFormErrorHandler = () => {\n        setFormHasErrors(false)\n    }\n\n\n    // footer for form card\n    const newWorkoutFooter = (\n        <div>\n            <Button\n                // link = {\"/\"}\n                onClick = { discardHandler }\n                type = \"button\"\n                text = \"Discard\"\n                className = 'bg-red-500 text-white/75 hover:text-white hover:bg-red-600 button rounded-md shadow hover:cursor-pointer ml-2 hover:scale-105'\n            />\n            <Button \n                type = \"submit\"\n                text = \"Create Workout\"\n                className = 'ml-2 button border border-gray-1 rounded-md shadow hover:cursor-pointer hover:scale-105'\n            />\n        </div>\n    )\n\n    return (\n        \n        <React.Fragment>\n\n            <ErrorModal error = { hasError } onClear = { clearError } />\n\n            { \n                formHasErrors &&\n                <ErrorModal error = { 'Could not create workout! Please make sure the form is filled out correctly.' } onClear = { clearFormErrorHandler }/>\n            }\n            \n\n            <form onSubmit={ submitHandler }>\n\n                <Card header = {\"New Workout\"} footer = { newWorkoutFooter }>\n\n                        <Input\n                            id = \"workoutTitle\"\n                            label = \"Workout Title\"\n                            type = \"text\"\n                            placeholder = \"Enter a title.\"\n                            errorText = \"Please enter a title!\"\n                        />\n\n                        { exerciseInputsList }\n                        \n                        { exerciseInputsList.length < 10 &&\n                            <Button\n                                type = \"button\"\n                                onClick = { addExerciseInput }\n                                text = \"Add Another Exercise\"\n                                className = 'max-w-xs button border border-gray-1 rounded-md shadow hover:cursor-pointer hover:scale-105 mb-4'\n                            />\n                        }\n\n                </Card>\n\n            </form>\n\n        </React.Fragment>\n    )\n}\n\nexport default NewWorkout","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","className","id","inputNumber","label","type","placeholder","errorText","value","exerciseName","exerciseSets","exerciseReps","exerciseWeightUsed","auth","useContext","AuthContext","exerciseInputs","useState","exerciseInputsList","setExerciseInputsList","inputCount","setInputCount","newInput","length","navigate","useNavigate","useFetch","hasError","sendRequest","clearError","formHasErrors","setFormHasErrors","submitHandler","event","preventDefault","errors","target","exercise","sets","reps","weightUsed","formData","workoutTitle","exercises","push","count","i","process","Authorization","token","JSON","stringify","responseData","nextPageID","workout","setTimeout","newWorkoutFooter","onClick","text","error","onClear","onSubmit","header","footer","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}