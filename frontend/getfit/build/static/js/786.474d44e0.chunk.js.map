{"version":3,"file":"static/js/786.474d44e0.chunk.js","mappings":"iIAqDA,IAjDsB,SAAAA,GAClB,OAEI,iBAAKC,UAAU,GAAf,WAEI,SAAC,IAAD,CACIC,GAAE,kBAAeF,EAAMG,YAArB,SACFC,MAAQ,gBACRC,KAAO,OACPC,YAAc,gBACdC,UAAY,uBACZC,MAAUR,EAAMS,cAAgB,QAEpC,iBAAKR,UAAU,sCAAf,WAEI,SAAC,IAAD,CACIC,GAAE,kBAAeF,EAAMG,YAArB,SACFC,MAAQ,OACRC,KAAO,SACPC,YAAc,IACdC,UAAY,4BACZC,MAAUR,EAAMU,cAAgB,QAGpC,SAAC,IAAD,CACIR,GAAE,kBAAeF,EAAMG,YAArB,SACFC,MAAQ,OACRC,KAAO,SACPC,YAAc,IACdC,UAAY,4BACZC,MAAUR,EAAMW,cAAgB,QAGpC,SAAC,IAAD,CACIT,GAAE,kBAAeF,EAAMG,YAArB,WACFC,MAAQ,SACRC,KAAO,SACPC,YAAc,IACdC,UAAY,oCACZC,MAAUR,EAAMY,oBAAsB,YAQzD,C,wKC+ND,UApQoB,SAAAZ,GAGhB,IAAMa,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAEpBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiB,GAErB,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAQC,EAAR,KAAuBC,EAAvB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,MAAzD,eAAyBG,GAAzB,WACA,GAAsDH,EAAAA,EAAAA,UAASD,GAA/D,eAAQK,EAAR,KAA4BC,EAA5B,KACA,GAAsCL,EAAAA,EAAAA,UAAS,GAA/C,eAAQM,EAAR,KAAoBC,EAApB,KAEA,GAAyDC,EAAAA,EAAAA,KAAjDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,WAEpCC,GAAYC,EAAAA,EAAAA,MAAYD,WAE9BE,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAY,yCAAG,kHAGcL,EAAW,UAE/BM,sCAF+B,oBAEcJ,EAFd,SAIlC,MAEA,CACIK,cAAe,UAAYxB,EAAKyB,QAV3B,OAGPC,EAHO,OAiBblB,EAAiBkB,EAAaC,SAC9BlB,EAAmBiB,EAAaC,QAAQC,WACxCf,EAAca,EAAaC,QAAQC,UAAUC,QAnBhC,gDAsBbC,QAAQC,IAAR,MAtBa,yDAAH,qDA2BlBT,GAEH,GAAE,CAAEL,EAAaE,EAAWnB,EAAKyB,QAKlC,IAAIO,GACA,SAAC,IAAD,CACI1C,YAAgBe,EAAewB,OAASjB,EAAa,GAC7CP,EAAewB,OAASjB,EAAa,GASrD,GAA4CN,EAAAA,EAAAA,WAAS,GAArD,eAAQ2B,EAAR,KAAuBC,EAAvB,KAEMC,EAAa,yCAAG,WAAOC,GAAP,sFA6BlB,IA3BAA,EAAMC,iBAEFC,EAAS,GACTC,EAASH,EAAMG,OAMfC,EAAW,CACX5C,aAAc,GACd6C,KAAM,EACNC,KAAM,EACNC,WAAY,IAIZC,EAAW,CACXC,aAAc,GACdjB,UAAW,IAGfW,EAAO,GAAG5C,MAAQiD,EAASC,aAAeN,EAAO,GAAG5C,MAAQ2C,EAAOQ,KAAK,0CAGpEC,EAAQ,EAEHC,EAAI,EAAGA,EAAIT,EAAOV,OAAO,EAAGmB,IAE7BA,EAAE,IAAM,EACRT,EAAOS,GAAGrD,MAAQ6C,EAAS5C,aAAe2C,EAAOS,GAAGrD,MAAQ2C,EAAOQ,KAAP,2CAAgDC,EAAhD,MAGrDC,EAAE,IAAM,EACfT,EAAOS,GAAGrD,MAAQ6C,EAASC,KAAOF,EAAOS,GAAGrD,MAAQ2C,EAAOQ,KAAP,kDAAuDC,EAAvD,MAG7CC,EAAE,IAAM,EACfT,EAAOS,GAAGrD,MAAQ6C,EAASE,KAAOH,EAAOS,GAAGrD,MAAQ2C,EAAOQ,KAAP,kDAAuDC,EAAvD,OAIpDR,EAAOS,GAAGrD,MAAQ6C,EAASG,WAAWG,KAAKP,EAAOS,GAAGrD,OAAS2C,EAAOQ,KAAP,wDAA6DC,EAA7D,MAU9DH,EAAShB,UAAUkB,KAAKN,GACxBO,IAGAP,EAAW,CACP5C,aAAc,GACd6C,KAAM,EACNC,KAAM,EACNC,WAAY,KA9DN,KAoEdL,EAAOT,OAAS,GApEF,wBAsEdK,GAAiB,GAtEH,sDA6ERjB,EAAW,UAEVM,sCAFU,oBAEmCJ,GAEhD,QAEA,CACI,eAAgB,mBAChBK,cAAe,UAAYxB,EAAKyB,OAGpCwB,KAAKC,UAAU,CACXL,aAAcD,EAASC,aACvBjB,UAAWgB,EAAShB,aA1Fd,2DA8FdE,QAAQC,IAAI,0BACZD,QAAQC,IAAR,MA/Fc,QAkGlB5B,EAAS,YAAD,OAAagB,EAAb,UAlGU,2DAAH,sDAyGbgC,EACF5C,IAAiB,gBAAInB,UAAU,WAAd,8BAA2CmB,EAAcsC,gBAGxEO,GACF,+BACI,SAAC,IAAD,CACIC,KAAI,mBAAgBlC,EAAhB,SACJ3B,KAAO,OACP8D,KAAO,UACPlE,UAAY,+IAEhB,SAAC,IAAD,CACII,KAAO,SACP8D,KAAO,eACPlE,UAAY,+FAKxB,OAEI,UAAC,WAAD,YAEA,SAAC,IAAD,CAAYmE,MAAUvC,EAAWwC,QAAYtC,IAE3CH,IACE,0BACI,SAAC,IAAD,CAAgB0C,WAAS,OAKxB1C,GAAakB,IACd,SAAC,IAAD,CAAYsB,MAAU,+EAAiFC,QAtCrF,WAC1BtB,GAAiB,EACpB,KAuCUnB,GAAaR,IAGZ,iBAAMmD,SAAWvB,EAAjB,UACI,UAAC,IAAD,CAAMgB,OAAWA,EAASC,OAAWA,EAArC,UAGQ7C,IACA,SAAC,IAAD,CACIlB,GAAG,eACHE,MAAQ,gBACRC,KAAK,OACLG,MAAUY,EAAcsC,gBAIhC,wBAEQtC,GAAiBA,EAAcqB,UAAU+B,KAAI,SAAAnB,GAAQ,OACjD,yBACI,SAAC,IAAD,CACI5C,aAAiB4C,EAAS5C,aAC1BC,aAAiB2C,EAASC,KAC1B3C,aAAiB0C,EAASE,KAC1B3C,mBAAuByC,EAASG,cAL5BH,EAASnD,GAD4B,MAc3DqB,EAEAE,EAAa,KACX,SAAC,IAAD,CACApB,KAAO,SACPoE,QA1LC,WACrBjD,EAAsB,GAAD,eAAMD,GAAN,CAA0BsB,KAC/CnB,EAAcD,EAAa,EAC9B,EAwLuB0C,KAAO,uBACPlE,UAAY,mGASvC,C,gFC5Qc,SAASyE,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,EAClD,CDES,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["Pages/Workout/Components/ExerciseInput.js","Pages/Workout/Pages/EditWorkout.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from \"react\";\n\nimport Input from \"../../../Components/FormElements/Input\";\n\nconst ExerciseInput = props => {\n    return (\n\n        <div className=\"\">\n\n            <Input\n                id = {`exercise${props.inputNumber}-name`}\n                label = \"Exercise Name\"\n                type = \"text\"\n                placeholder = \"Enter a name.\"\n                errorText = \"Please enter a name!\"\n                value = { props.exerciseName || null }\n            />\n            <div className=\"flex justify-between max-w-2xl mb-4\">\n                \n                <Input\n                    id = {`exercise${props.inputNumber}-sets`}\n                    label = \"Sets\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter a set count!\"\n                    value = { props.exerciseSets || null }\n                />\n\n                <Input\n                    id = {`exercise${props.inputNumber}-reps`}\n                    label = \"Reps\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter a rep count!\"\n                    value = { props.exerciseReps || null }\n                />\n\n                <Input\n                    id = {`exercise${props.inputNumber}-weight`}\n                    label = \"Weight\"\n                    type = \"number\"\n                    placeholder = \"1\"\n                    errorText = \"Please enter the weight you used!\"\n                    value = { props.exerciseWeightUsed || null }\n                />\n            \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default ExerciseInput","import React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport { useFetch } from \"../../../Hooks/useFetch\";\n\nimport Button from \"../../../Components/FormElements/Button\";\nimport Input from \"../../../Components/FormElements/Input\";\nimport ExerciseInput from \"../Components/ExerciseInput\";\nimport Card from \"../../../Components/UIElements/Card\";\nimport LoadingSpinner from \"../../../Components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../../Components/UIElements/ErrorModal\";\n\nimport { AuthContext } from \"../../../Context/auth-context\";\n\nconst EditWorkout = props => {\n\n    // AUTH\n    const auth = useContext(AuthContext)\n\n    let navigate = useNavigate()\n\n    let exerciseInputs = []\n\n    const [ loadedWorkout, setLoadedWorkout ] = useState(null)\n    const [ loadedExercises, setLoadedExercises ] = useState(null)\n    const [ exerciseInputsList, setExerciseInputsList ] = useState(exerciseInputs)\n    const [ inputCount, setInputCount ] = useState(0)\n\n    const { isLoading, hasError, sendRequest, clearError } = useFetch()\n\n    const workoutID = useParams().workoutID\n\n    useEffect(() => {\n\n        const fetchWorkout = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    // URL\n                    `${process.env.REACT_APP_BACKEND_URL}/workout/${workoutID}/view`,\n                    // METHOD\n                    'GET',\n                    // HEADERS\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                // console.log(responseData.message)\n                // console.log(responseData.workout)\n\n                setLoadedWorkout(responseData.workout)\n                setLoadedExercises(responseData.workout.exercises)\n                setInputCount(responseData.workout.exercises.length)\n\n            } catch(err) {\n                console.log(err)\n            }\n\n        }\n\n        fetchWorkout()\n\n    }, [ sendRequest, workoutID, auth.token ])\n\n    // console.log(`Before exerciseInputs: ${loadedExercises}`)\n    // console.log(`Input Count: ${inputCount}`)\n\n    let newInput = \n        <ExerciseInput\n            inputNumber = { exerciseInputs.length + inputCount + 1}\n            key = { exerciseInputs.length + inputCount + 1}\n        />\n\n    // addInput handler function\n    const addExerciseInput = () => {\n        setExerciseInputsList([ ...exerciseInputsList, newInput ])\n        setInputCount(inputCount + 1)\n    }\n\n    const [ formHasErrors, setFormHasErrors ] = useState(false)\n\n    const submitHandler = async (event) => {\n\n        event.preventDefault()\n\n        let errors = []\n        let target = event.target\n\n        // similar code to what's in NewWorkout\n        // looping over the form inputs and appending them to the data I send to the backend\n\n        // variables to add exercises to the body of the form data so it will save correctly to the backend\n        let exercise = {\n            exerciseName: \"\",\n            sets: 0,\n            reps: 0,\n            weightUsed: []\n        }\n\n        // this is what the backend is expecting, so I will store everything here\n        let formData = {\n            workoutTitle: \"\",\n            exercises: []\n        }\n\n        target[0].value ? formData.workoutTitle = target[0].value : errors.push('Please enter a title for your workout!')\n\n        // variable to track which exercise we are inputting\n        let count = 1\n\n        for (let i = 1; i < target.length-3; i++) {\n            // first input for exercise\n            if (i%4 === 1) {\n                target[i].value ? exercise.exerciseName = target[i].value : errors.push(`Please enter a name for exercise ${count}!`)\n                // console.log(`Exercise Title: ${target[i].value} index: ${i}`)\n            // second input\n            } else if (i%4 === 2) {\n                target[i].value ? exercise.sets = target[i].value : errors.push(`Please enter the set count for exercise ${count}!`)\n                // console.log(`Exercise Sets: ${target[i].value} index: ${i}`)\n            // third input\n            } else if (i%4 === 3) {\n                target[i].value ? exercise.reps = target[i].value : errors.push(`Please enter the rep count for exercise ${count}!`)\n                // console.log(`Exercise Reps: ${target[i].value} index: ${i}`)\n            // last input, push to exercise array and reset exercise object\n            } else {\n                target[i].value ? exercise.weightUsed.push(target[i].value) : errors.push(`Please enter the weight you used for exercise ${count}!`)\n                // console.log(`Exercise Weight Used: ${exercise.weightUsed} index: ${i}`)\n                // console.log(`Full Exercise:\n                //     ${exercise.exerciseName}\n                //     ${exercise.sets}\n                //     ${exercise.reps}\n                //     ${exercise.weightUsed}\n                // `)\n\n                // Add newly created exercise to array in formData object\n                formData.exercises.push(exercise)\n                count++\n\n                // reset exercise variable. Only really necessary for the weightUsed array\n                exercise = {\n                    exerciseName: \"\",\n                    sets: 0,\n                    reps: 0,\n                    weightUsed: []\n                }\n            }\n        }\n\n        // if there are any errors, prevent form submission\n        if (errors.length > 0) {\n            // console.log(errors)\n            setFormHasErrors(true)\n            // console.log(formHasErrors)\n            return\n        }\n\n        // send request to backend to update\n        try {\n            await sendRequest(\n                // URL\n                `${process.env.REACT_APP_BACKEND_URL}/workout/${workoutID}`,\n                // METHOD\n                \"PATCH\",\n                // HEADERS\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + auth.token\n                },\n                // BODY\n                JSON.stringify({\n                    workoutTitle: formData.workoutTitle,\n                    exercises: formData.exercises\n                })\n            )\n        } catch(err) {\n            console.log(\"Error updating workout\")\n            console.log(err)\n        }\n\n        navigate(`/workout/${workoutID}/view`)\n    }\n\n    const clearFormErrorHandler = () => {\n        setFormHasErrors(false)\n    }\n\n    const header = (\n        loadedWorkout && <h2 className=\"truncate\">Editing Workout: {loadedWorkout.workoutTitle}</h2>\n    )\n\n    const footer = (\n        <footer>\n            <Button\n                link = {`/workout/${workoutID}/view`}\n                type = \"text\"\n                text = \"Discard\"\n                className = \"bg-red-500 text-white/75 hover:text-white hover:bg-red-600 button rounded-md shadow hover:cursor-pointer mr-2 border-none hover:scale-105\"\n            />\n            <Button\n                type = \"submit\"\n                text = \"Save Changes\"\n                className = \"ml-2 button border border-gray-1 rounded-md shadow hover:cursor-pointer hover:scale-105\"\n            />\n        </footer>\n    )\n\n    return (\n\n        <React.Fragment>\n\n        <ErrorModal error = { hasError } onClear = { clearError } />\n\n        { isLoading &&\n            <div>\n                <LoadingSpinner asOverlay />\n            </div>\n        }\n\n            { \n                !isLoading && formHasErrors &&\n                <ErrorModal error = { 'Could not update workout! Please make sure the form is filled out correctly.' } onClear = { clearFormErrorHandler }/>\n            }\n\n            { !isLoading && loadedWorkout && (\n                \n                \n                <form onSubmit={ submitHandler }>\n                    <Card header = { header } footer = { footer }>\n\n                        {\n                            loadedWorkout && \n                            <Input\n                                id=\"workoutTitle\"\n                                label = \"Workout Title\"\n                                type=\"text\"\n                                value = { loadedWorkout.workoutTitle }\n                            />\n                        }\n\n                        <ul>\n                            {\n                                loadedWorkout && loadedWorkout.exercises.map(exercise => (\n                                    <li key = { exercise.id }>\n                                        <ExerciseInput\n                                            exerciseName = { exercise.exerciseName }\n                                            exerciseSets = { exercise.sets }\n                                            exerciseReps = { exercise.reps }\n                                            exerciseWeightUsed = { exercise.weightUsed }\n                                        />\n                                    </li>\n                                ))\n                            }\n                        </ul>\n\n                        \n                        { exerciseInputsList }\n\n                        { inputCount < 10 &&\n                            <Button\n                            type = \"button\"\n                            onClick = { addExerciseInput }\n                            text = \"Add Another Exercise\"\n                            className = \"button border border-gray-1 rounded-md shadow hover:cursor-pointer hover:scale-105 mb-4\"\n                            />\n                        }\n                        </Card>\n                    </form>\n            )}\n\n        </React.Fragment>\n    )\n}\n\nexport default EditWorkout","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","className","id","inputNumber","label","type","placeholder","errorText","value","exerciseName","exerciseSets","exerciseReps","exerciseWeightUsed","auth","useContext","AuthContext","navigate","useNavigate","exerciseInputs","useState","loadedWorkout","setLoadedWorkout","setLoadedExercises","exerciseInputsList","setExerciseInputsList","inputCount","setInputCount","useFetch","isLoading","hasError","sendRequest","clearError","workoutID","useParams","useEffect","fetchWorkout","process","Authorization","token","responseData","workout","exercises","length","console","log","newInput","formHasErrors","setFormHasErrors","submitHandler","event","preventDefault","errors","target","exercise","sets","reps","weightUsed","formData","workoutTitle","push","count","i","JSON","stringify","header","footer","link","text","error","onClear","asOverlay","onSubmit","map","onClick","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}